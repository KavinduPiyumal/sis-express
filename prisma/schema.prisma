// Prisma schema for Student Information System (SIS)


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum TargetAudience {
  all
  students
  admins
}

enum NotificationType {
  notice
  result
  payment
  medical_report
  general
}

enum StudentStatus {
  active
  inactive
  graduated
  suspended
}

enum AttendanceStatus {
  present
  absent
  late
  excused
}

enum EnrollmentStatus {
  pending
  active
  dropped
  completed
  failed
  retake
}

enum MedicalStatus {
  pending
  approved
  rejected
}

enum TranscriptStatus {
  Pass
  Fail
  With_Honors
}

enum PaymentType {
  tuition
  library
  laboratory
  examination
  other
}

enum PaymentStatus {
  pending
  approved
  rejected
}

enum NoticePriority {
  low
  medium
  high
  urgent
}

// MODELS

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  firstName   String
  lastName    String
  email       String   @unique
  password    String
  role        String
  phone       String?
  profileId   String?
  permissions String[]
  address     String?
  dateOfBirth DateTime?
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  profileImage String?
  gender      String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  changePasswordOtp String?
  changePasswordOtpExpires DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  student     Student?
  lecturer    Lecturer?
  logs        Log[]
  notifications Notification[]
  payments    Payment[] @relation("PaymentStudent")
  medicalReports MedicalReport[] @relation("MedicalReportStudent")
  semesterGPAs SemesterGPA[]
  cgpas       CGPA[] @relation("UserCGPA")
  transcripts Transcript[]
  reviewedPayments Payment[] @relation("PaymentReviewedBy")
  reviewedMedicalReports MedicalReport[] @relation("MedicalReportReviewedBy")
  markedAttendances Attendance[] @relation("AttendanceMarkedBy")
  enteredResults Result[] @relation("ResultEnteredBy")
  approvedMedicals Medical[] @relation("MedicalApprovedBy")
  notices     Notice[] @relation("UserNotices")
  links       Link[]   @relation("UserLinks")
}

model Student {
  id          String   @id @default(uuid())
  userId      String   @unique
  studentNo   String   @unique
  batchId     String
  status      StudentStatus @default(active)
  parentName  String?
  parentPhone String?
  emergencyContactName String?
  emergencyContactPhone String?
  uniRegistrationDate DateTime?
  user        User     @relation(fields: [userId], references: [id])
  batch       Batch    @relation(fields: [batchId], references: [id])
  enrollments Enrollment[]
  medicals    Medical[] @relation("StudentMedical")
  cgpas       CGPA[] @relation("StudentCGPA")
  semesterGPAs SemesterGPA[] @relation("StudentSemesterGPA")
  transcripts Transcript[] @relation("StudentTranscript")
  attendances Attendance[] @relation("StudentAttendance")
  results     Result[] @relation("StudentResult")
}

model Lecturer {
  id        String   @id @default(uuid())
  userId    String   @unique
  departmentId String?
  user      User     @relation(fields: [userId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  courseOfferings CourseOffering[]
}

model Faculty {
  id        String   @id @default(uuid())
  name      String
  deanName  String?
  contactInfo String?
  departments Department[]
  degreePrograms DegreeProgram[]
}

model Department {
  id        String   @id @default(uuid())
  name      String
  facultyId String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  degreePrograms DegreeProgram[]
  lecturers  Lecturer[]
}
model DegreeProgram {
  id        String   @id @default(uuid())
  name      String
  duration  Int
  facultyId String
  departmentId String?
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  batches   Batch[]
  degreeRules DegreeRule[]
}

model Batch {
  id        String   @id @default(uuid())
  name      String
  programId String
  startYear Int
  program   DegreeProgram @relation(fields: [programId], references: [id])
  students  Student[]
  semesters Semester[]
  courseOfferings CourseOffering[]
}

model Semester {
  id        String   @id @default(uuid())
  name      String
  batchId   String
  startDate DateTime
  endDate   DateTime
  status    String
  batch     Batch    @relation(fields: [batchId], references: [id])
  courseOfferings CourseOffering[]
  semesterGPAs SemesterGPA[]
}

model Subject {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  credits   Int
  description String?
  courseOfferings CourseOffering[]
}

model CourseOffering {
  id        String   @id @default(uuid())
  subjectId String
  semesterId String
  batchId   String
  lecturerId String
  year      Int
  mode      String?
  capacity  Int?
  subject   Subject  @relation(fields: [subjectId], references: [id])
  semester  Semester @relation(fields: [semesterId], references: [id])
  batch     Batch    @relation(fields: [batchId], references: [id])
  lecturer  Lecturer @relation(fields: [lecturerId], references: [id])
  enrollments Enrollment[]
  classSessions ClassSession[]
  attendances Attendance[] @relation("CourseOfferingAttendance")
  results    Result[] @relation("CourseOfferingResult")
}

model ClassSession {
  id        String   @id @default(uuid())
  courseOfferingId String
  date      DateTime
  topic     String?
  location  String?
  durationMinutes Int?
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id])
  attendances Attendance[]
}

model Attendance {
  id        String   @id @default(uuid())
  classSessionId String
  courseOfferingId String
  studentId String
  status    AttendanceStatus @default(present)
  remarks   String?
  markedBy  String
  markedAt  DateTime @default(now())
  medicalId String?
  classSession ClassSession @relation(fields: [classSessionId], references: [id])
  courseOffering CourseOffering @relation("CourseOfferingAttendance", fields: [courseOfferingId], references: [id])
  student   Student  @relation("StudentAttendance", fields: [studentId], references: [id])
  markedByUser User @relation("AttendanceMarkedBy", fields: [markedBy], references: [id])
  medical   Medical? @relation("MedicalAttendance", fields: [medicalId], references: [id])
}

model Enrollment {
  id        String   @id @default(uuid())
  studentId String
  courseOfferingId String
  status    EnrollmentStatus @default(active)
  enrolledDate DateTime
  student   Student  @relation(fields: [studentId], references: [id])
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id])
}

model Medical {
  id        String   @id @default(uuid())
  studentId String
  submittedDate DateTime
  fromDate  DateTime
  toDate    DateTime
  reason    String
  attachments String[]
  status    MedicalStatus @default(pending)
  approvedBy String?
  decisionDate DateTime?
  student   Student  @relation("StudentMedical", fields: [studentId], references: [id])
  attendances Attendance[] @relation("MedicalAttendance")
  approvedByUser User? @relation("MedicalApprovedBy", fields: [approvedBy], references: [id])
}

model MedicalReport {
  id        String   @id @default(uuid())
  studentId String
  title     String
  description String?
  startDate DateTime
  endDate   DateTime?
  fileName  String?
  filePath  String?
  status    MedicalStatus @default(pending)
  reviewedBy String?
  reviewNotes String?
  reviewedAt DateTime?
  student   User     @relation("MedicalReportStudent", fields: [studentId], references: [id])
  reviewedByUser User? @relation("MedicalReportReviewedBy", fields: [reviewedBy], references: [id])
}

model CGPA {
  id        String   @id @default(uuid())
  studentId String
  userId    String?
  cgpaValue Decimal  @db.Decimal(3,2)
  graduationStatus TranscriptStatus
  student   Student   @relation("StudentCGPA", fields: [studentId], references: [id])
  user      User?     @relation("UserCGPA", fields: [userId], references: [id])
}

model SemesterGPA {
  id        String   @id @default(uuid())
  studentId String
  userId    String?
  semesterId String
  gpaValue  Decimal  @db.Decimal(3,2)
  student   Student  @relation("StudentSemesterGPA", fields: [studentId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  semester  Semester @relation(fields: [semesterId], references: [id])
}

model Transcript {
  id        String   @id @default(uuid())
  studentId String
  userId    String?
  issueDate DateTime
  finalCGPA Decimal  @db.Decimal(3,2)
  graduationStatus TranscriptStatus
  student   Student  @relation("StudentTranscript", fields: [studentId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
}

model GradingSystem {
  id        String   @id @default(uuid())
  gradeLetter String
  minMarks  Int
  maxMarks  Int
  gradePoint Decimal @db.Decimal(2,1)
}

model DegreeRule {
  id        String   @id @default(uuid())
  degreeProgramId String
  minCreditsToGraduate Int
  minCGPARequired Decimal @db.Decimal(3,2)
  honorsCriteria String?
  degreeProgram DegreeProgram @relation(fields: [degreeProgramId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  module    String?
  status    String?
  description String?
  entityType String?
  details   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Result {
  id        String   @id @default(uuid())
  studentId String
  courseOfferingId String
  marks     Decimal @db.Decimal(5,2)
  grade     String?
  gradePoint Decimal? @db.Decimal(3,2)
  enteredBy String
  enteredAt DateTime @default(now())
  student   Student  @relation("StudentResult", fields: [studentId], references: [id])
  courseOffering CourseOffering @relation("CourseOfferingResult", fields: [courseOfferingId], references: [id])
  enteredByUser User @relation("ResultEnteredBy", fields: [enteredBy], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  studentId String
  amount    Decimal  @db.Decimal(10,2)
  paymentType PaymentType
  description String?
  paymentDate DateTime
  receiptNumber String?
  fileName  String?
  filePath  String?
  status    PaymentStatus @default(pending)
  reviewedBy String?
  reviewNotes String?
  reviewedAt DateTime?
  student   User     @relation("PaymentStudent", fields: [studentId], references: [id])
  reviewedByUser User? @relation("PaymentReviewedBy", fields: [reviewedBy], references: [id])
}

model Notice {
  id        String   @id @default(uuid())
  title     String
  content   String
  priority  NoticePriority @default(medium)
  targetAudience TargetAudience @default(all)
  isActive  Boolean @default(true)
  publishDate DateTime @default(now())
  expiryDate DateTime?
  createdBy String
  createdByUser User @relation("UserNotices", fields: [createdBy], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(general)
  isRead    Boolean @default(false)
  relatedEntityId String?
  relatedEntityType String?
  readAt    DateTime?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Link {
  id        String   @id @default(uuid())
  title     String
  url       String
  description String?
  category  String?
  isActive  Boolean @default(true)
  targetAudience TargetAudience @default(all)
  order     Int @default(0)
  createdBy String
  createdByUser User @relation("UserLinks", fields: [createdBy], references: [id])
}


